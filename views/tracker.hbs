<style>
    /* Always set the map height explicitly to define the size of the div
       * element that contains the map. */
    #map {
        height: 100%;
    }

    #floating-panel {
        position: absolute;
        top: 10px;
        left: 25%;
        z-index: 5;
        background-color: #fff;
        padding: 5px;
        border: 1px solid #999;
        text-align: center;
        font-family: "Roboto", "sans-serif";
        line-height: 30px;
        padding-left: 10px;
    }

    #warnings-panel {
        width: 100%;
        height: 10%;
        text-align: center;
    }
</style>

<div id="map"></div>
&nbsp;
<div>
    <div id="floating-panel">
        <b>Start: </b>
        <input id="start" value="{{shipment.sender_address}}">
        <b>End: </b>
        <input id="end" , value="{{shipment.receiver_address}}">
    </div>
    <div id="map"></div>
    &nbsp;
    <div id="warnings-panel"></div>
</div>
<div id="warnings-panel"></div>

<script>
    let map
    let markers = new Map()

    document.addEventListener('DOMContentLoaded', () => {
        const socket = io('/')

        const image = "https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png";
        socket.on('locationsUpdate', locations => {
            markers.forEach((marker, id) => {
                marker.setMap(null)
                markers.delete(id)
            })
            const svgMarker = {
                path: "M10.453 14.016l6.563-6.609-1.406-1.406-5.156 5.203-2.063-2.109-1.406 1.406zM12 2.016q2.906 0 4.945 2.039t2.039 4.945q0 1.453-0.727 3.328t-1.758 3.516-2.039 3.070-1.711 2.273l-0.75 0.797q-0.281-0.328-0.75-0.867t-1.688-2.156-2.133-3.141-1.664-3.445-0.75-3.375q0-2.906 2.039-4.945t4.945-2.039z",
                fillColor: "blue",
                fillOpacity: 0.6,
                strokeWeight: 0,
                rotation: 0,
                scale: 2,
                anchor: new google.maps.Point(15, 30),
            };
            locations.forEach(([id, position]) => {
                if (position.lat && position.lng) {
                    const marker = new google.maps.Marker({
                        position,
                        map,
                        title: "Driver Location",
                        icon: svgMarker
                    })
                    markers.set(id, marker)
                }
            })
        })

        setInterval(() => {
            //console.log('emit locations')
            socket.emit('requestLocations')
        }, 2000)
    })

    function initMap() {
        const markerArray = [];
        // Instantiate a directions service.
        const directionsService = new google.maps.DirectionsService();
        navigator.geolocation.getCurrentPosition(pos => {
            const { latitude: lat, longitude: lng } = pos.coords
            map = new google.maps.Map(document.getElementById('map'), {
                center: { lat, lng },
                zoom: 5
            })
            const directionsRenderer = new google.maps.DirectionsRenderer({ map: map });
            // Instantiate an info window to hold step text.
            const stepDisplay = new google.maps.InfoWindow();
            // Display the route between the initial start and end selections.
            calculateAndDisplayRoute(
                directionsRenderer,
                directionsService,
                markerArray,
                stepDisplay,
                map
            );
            const onChangeHandler = function () {
                calculateAndDisplayRoute(
                    directionsRenderer,
                    directionsService,
                    markerArray,
                    stepDisplay,
                    map
                );
            };
            function calculateAndDisplayRoute(
                directionsRenderer,
                directionsService,
                markerArray,
                stepDisplay,
                map
            ) {
                // First, remove any existing markers from the map.
                for (let i = 0; i < markerArray.length; i++) {
                    markerArray[i].setMap(null);
                }
                // Retrieve the start and end locations and create a DirectionsRequest using
                // WALKING directions.
                directionsService
                    .route({
                        origin: document.getElementById("start").value,
                        destination: document.getElementById("end").value,
                        travelMode: google.maps.TravelMode.DRIVING,
                    })
                    .then((result) => {
                        // Route the directions and pass the response to a function to create
                        // markers for each step.
                        document.getElementById("warnings-panel").innerHTML =
                            "<b>" + result.routes[0].warnings + "</b>";
                        directionsRenderer.setDirections(result);
                    })
                    .catch((e) => {
                        window.alert("Directions request failed due to " + e);
                    });
            }
        }, err => {
            console.error(err)
        })
    }
</script>