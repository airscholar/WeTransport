<script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
<!-- jsFiddle will insert css and js -->
<style>
    /* Always set the map height explicitly to define the size of the div
       * element that contains the map. */
    #map {
        height: 100%;
    }

    #floating-panel {
        position: absolute;
        top: 10px;
        left: 25%;
        z-index: 5;
        background-color: #fff;
        padding: 5px;
        border: 1px solid #999;
        text-align: center;
        font-family: "Roboto", "sans-serif";
        line-height: 30px;
        padding-left: 10px;
    }

    #warnings-panel {
        width: 100%;
        height: 10%;
        text-align: center;
    }
</style>

<div>
    <div id="floating-panel">
        <b>Start: </b>
        <input id="start" value="{{shipment.sender_address}}">
        <b>End: </b>
        <input id="end" , value="{{shipment.receiver_address}}">
    </div>
    <div id="map"></div>
    &nbsp;
    <div id="warnings-panel"></div>


</div>

<!-- Async script executes immediately and must be after any DOM elements used in callback. -->


<script>
    var pusher = new Pusher('f6bfc91466e34cd2278b', {
        cluster: 'mt1'
    });


    var channel = pusher.subscribe('mapschannel');
    channel.bind('googlemap', function (data) {
        alert('Received my-event with message: ' + data.message);
    });

    function initMap() {
        const image = "https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png";
        const markerArray = [];
        // Instantiate a directions service.
        const directionsService = new google.maps.DirectionsService();
        // Create a map and center it on Manhattan.
        const map = new google.maps.Map(document.getElementById("map"), {
            zoom: 13,
            center: { lat: 40.771, lng: -73.974 },
        });
        const myLatLng = { lat: '3.3792', lng: '6.5244' };

        new google.maps.Marker({
            position: myLatLng,
            map,
            title: "Driver Location",
            icon: image
        });
        // Create a renderer for directions and bind it to the map.
        const directionsRenderer = new google.maps.DirectionsRenderer({ map: map });
        // Instantiate an info window to hold step text.
        const stepDisplay = new google.maps.InfoWindow();
        // Display the route between the initial start and end selections.
        calculateAndDisplayRoute(
            directionsRenderer,
            directionsService,
            markerArray,
            stepDisplay,
            map
        );

        // Listen to change events from the start and end lists.
        const onChangeHandler = function () {
            calculateAndDisplayRoute(
                directionsRenderer,
                directionsService,
                markerArray,
                stepDisplay,
                map
            );
        };
        document.getElementById("start").addEventListener("change", onChangeHandler);
        document.getElementById("end").addEventListener("change", onChangeHandler);

    }

    function calculateAndDisplayRoute(
        directionsRenderer,
        directionsService,
        markerArray,
        stepDisplay,
        map
    ) {
        // First, remove any existing markers from the map.
        for (let i = 0; i < markerArray.length; i++) {
            markerArray[i].setMap(null);
        }
        // Retrieve the start and end locations and create a DirectionsRequest using
        // WALKING directions.
        directionsService
            .route({
                origin: document.getElementById("start").value,
                destination: document.getElementById("end").value,
                travelMode: google.maps.TravelMode.DRIVING,
            })
            .then((result) => {
                // Route the directions and pass the response to a function to create
                // markers for each step.
                document.getElementById("warnings-panel").innerHTML =
                    "<b>" + result.routes[0].warnings + "</b>";
                directionsRenderer.setDirections(result);
                //showSteps(result, markerArray, stepDisplay, map);
            })
            .catch((e) => {
                window.alert("Directions request failed due to " + e);
            });
    }

    function showSteps(directionResult, markerArray, stepDisplay, map) {
        // For each step, place a marker, and add the text to the marker's infowindow.
        // Also attach the marker to an array so we can keep track of it and remove it
        // when calculating new routes.
        const myRoute = directionResult.routes[0].legs[0];

        for (let i = 0; i < myRoute.steps.length; i++) {
            const marker = (markerArray[i] =
                markerArray[i] || new google.maps.Marker({
                    icon: image
                }));
            marker.setMap(map);
            marker.setPosition(myRoute.steps[i].start_location);
            attachInstructionText(
                stepDisplay,
                marker,
                myRoute.steps[i].instructions,
                map
            );
        }
    }

    function attachInstructionText(stepDisplay, marker, text, map) {
        google.maps.event.addListener(marker, "click", () => {
            // Open an info window when the marker is clicked on, containing the text
            // of the step.
            stepDisplay.setContent(text);
            stepDisplay.open(map, marker);
        });
    }
    //let map;

    //function initMap() {
    //  const map = new google.maps.Map(document.getElementById("map"), {
    //    zoom: 10,
    //   center: { lat: 6.5244, lng: 3.3792 },
    //});
    // const image =
    //     "https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png";
    // const beachMarker = new google.maps.Marker({
    //     position: { lat: 6.5244, lng: 3.3792 },
    //     map,
    //     icon: image,
    // });
    //}
</script>